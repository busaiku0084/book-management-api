plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.flywaydb.flyway' version '10.18.0'
    id "org.jooq.jooq-codegen-gradle" version "3.19.21"
    id 'org.jlleitschuh.gradle.ktlint' version '11.5.1'
}

group = 'io.github.busaiku0084'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'com.pinterest:ktlint:0.50.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    jooqCodegen 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.1.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.flywaydb:flyway-core'
    testImplementation 'io.mockk:mockk:1.13.8'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/database'
    user = 'user'
    password = 'password'
    locations = ['classpath:db/migration']
}

jooq {
    configuration {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:55432/testdb'
            user = 'user'
            password = 'password'
        }
        generator {
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = "public"
                includes = '.*'
            }
            target {
                packageName = 'io.github.busaiku0084.bookmanagement.jooq'
                directory = "${buildDir}/generated"
            }
        }
    }
}

sourceSets {
    main.java.srcDirs += "${buildDir}/generated"
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

ktlint {
    debug = true
    ignoreFailures = true
    disabledRules = ["no-wildcard-imports", "max-line-length"]
    filter {
        exclude { it.file.path.contains("build/generated") }
    }
}

// Gradle から docker コマンドを実行するためのパスを取得
def dockerPath = ['which', 'docker'].execute().text.trim()

tasks.register('startDockerForTest', Exec) {
    description = 'Start Docker Compose services'
    commandLine dockerPath, 'compose', '-f', 'compose.yaml', '-f', 'compose.override.test.yaml', 'up', '-d'
}

tasks.register('stopDockerForTest', Exec) {
    description = 'Stop Docker Compose services'
    commandLine dockerPath, 'compose', '-f', 'compose.yaml', '-f', 'compose.override.test.yaml', 'down'
}

// PostgreSQL がクエリ受付可能になるまで最大30秒待機する
def waitForPostgresContainer(String containerName, int timeoutSeconds = 30) {
    def start = System.currentTimeMillis()
    def end = start + (timeoutSeconds * 1000)

    while (System.currentTimeMillis() < end) {
        def result = ['docker', 'exec', containerName, 'pg_isready', '-U', 'user'].execute()
        def output = result.text
        if (output.contains("accepting connections")) {
            println "PostgreSQL container is ready: $output"
            return
        } else {
            println "Waiting for PostgreSQL container...: $output"
            sleep(1000)
        }
    }

    throw new GradleException("Timeout: PostgreSQL container '$containerName' not ready.")
}

tasks.named('compileKotlin') {
    dependsOn tasks.named('jooqCodegen')
}

tasks.named('compileJava') {
    dependsOn tasks.named('jooqCodegen')
}

tasks.matching { it.name.startsWith('runKtlintCheck') }.configureEach {
    dependsOn tasks.named('jooqCodegen')
}

// jooq のコード生成前に DB を起動し、ready を確認してから実行
tasks.named('jooqCodegen') {
    dependsOn startDockerForTest
    doFirst {
        waitForPostgresContainer('book-management-db-test')
    }
    finalizedBy stopDockerForTest
}

// build 時に jooqCodegen を含める（clean build でコードが欠けるのを防ぐ）
tasks.named('build') {
    dependsOn jooqCodegen
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty("spring.profiles.active", "test")
    dependsOn startDockerForTest
    finalizedBy stopDockerForTest
}
